openapi: '3.0.3'
info:
  title: OpenEvents
  description: An Express API for OpenEvents
  contact:
    email: danimr1999@gmail.com
    name: Daniel Muelle Ramos
  license:
    name: MIT
    url: https://www.mit.edu/~amini/LICENSE.md
  version: 1.0.0
servers:
- url: http://localhost:3000/
  description: Development
paths:
  /users:
    post:
      tags:
      - users
      summary: Creates a user.
      description: Inserts into database the user received from the request body in JSON format.
      security: []
      requestBody:
        description: User information in JSON format.
        required: true
        content:
          application/json:
            schema:
               $ref: '#/components/schemas/RequestUser'
      responses:
        "201":
          description: User created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseUser'
        "400":
          description: Already exists a user with the same email address as the specified or any of the user fields is missing or does not meet the requirements to be considered as valid.
    get:
      tags:
      - users
      summary: Gets all users.
      description: Gets all users from the database without their password.
      security:
        - BearerAuth: []
      responses:
        "200":
          description: List of all users.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseListUserWithId'
    put:
      tags:
        - users
      summary: Edits specified fields of the authenticated user.
      security:
        - BearerAuth: []
      requestBody:
        description: User information in JSON format. Only the fields to be updated are required.
        required: true
        content:
          application/json:
            schema:
               $ref: '#/components/schemas/RequestUser'
      responses:
        "200":
          description: User with the updated information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseUserWithId'
    delete:
      tags:
        - users
      summary: Deletes the authenticated user and all the information related with it.
      description: Besides deleting the user, it also deletes all the events where the user is the owner,
        all the assistances created by the user, all the friendships where the deleted user is related and all
        the messages sent or received by the user to delete.
      security:
        - BearerAuth: []
      responses:
        "200":
          description: User and all the information related to it deleted successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: Message notifying that the action has been completed successfully.
                    example: "User was deleted successfully"

  /users/login:
        post:
          tags:
          - users
          summary: Authenticates a user.
          description: Checks whether credentials are valid or not. If credentials are valid, generates an authentication token.
          security: []
          requestBody:
            description: Email address and password of the user to be authenticated in JSON format.
            required: true
            content:
              application/json:
                schema:
                  type: object
                  items:
                    required: 
                      - email
                      - password
                  properties:
                    email:
                      description: The email address to assign to the user
                      type: string
                      example: "janedoe@openevents.com"
                    password:
                      description: The password to assign to the user
                      type: string
                      example: "password"
          responses:
            "200":
              description: User authenticated.
              content:
                application/json:
                  schema:
                    type: object
                    items:
                      required:
                      - bearer_token
                    properties:
                      bearer_token:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiJ9.VyaWEiLCJsYXN0X25hbWUiOiJHVyaWEiLCJsYXN0X25hbWUiOJHdWFyZGlhIiwiZW1haWwiOiJudXJpYUBvcGVuZXZlbnRzLmNvbSIsImltYWdlIjoiaHR0cHM6Ly93d3cuY2xldmVyZmlsZXMuY29tL2hvd3RvL3dwLWNvbnRlbnQvdXBsb2Fkcy8yMDE4LzAzL21pbmlvbi5qcGcifQ.HrfvFg8FhyRe1f-gmTdHvdWFyZGlhIiwiZW1haWwPvL_aP4"
            "400":
              description: Invalid credentials or any of the credentials fields is missing or does not meet the requirements to be considered as valid.
              
  /users/{user_id}:
      get:
        tags:
          - users
        summary: Gets a user by ID.
        security:
          - BearerAuth: []
        parameters:
          - in: path
            name: user_id
            schema:
              type: integer
            required: true
            description: ID of the user to get
        responses:
          "200":
              description: User matching with the specified ID.
              content:
                application/json:
                  schema:
                    $ref: '#/components/schemas/ResponseUserWithId'
                    
          "400":
            description: User does not exist or was not found.
            
  /users/search:
    get:
      tags:
        - users
      summary: Searches users with a name, last name or email matching the value of the query parameter.
      security:
          - BearerAuth: []
      parameters:
          - in: query
            name: text
            schema:
              type: string
            required: true
            description: Text to search on the name, last name or email fields of a user to match.
      responses:
        "200":
          description: List of users that match with the text on their name, last name or email field.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseListUserWithId'
        "400":
          description: No text introduced.
        
  /events:
    get:
      tags:
        - events
      summary: Gets all future events.
      description: Gets all the events whose start date is greater than now. 
      security:
        - BearerAuth: []
      responses:
        "200":
          description: List of future events.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseListEventWithId'
    post:
      tags:
        - events
      summary: Creates an event.
      description: Depending on some parameters, there are fields that can be optional. 
        If an event is online, the link is required and the location and the max_attendees are optional.
        If an event is face-to-face, the link is optional and the location and the max_attendees are required.
      security:
        - BearerAuth: []
      requestBody:
        description: Event information in JSON format.
        required: true
        content:
          application/json:
            schema:
               $ref: '#/components/schemas/RequestEvent'
      responses:
        "201":
          description: Created event.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseEventWithId'

  /events/search:
    get:
      tags:
        - events
      summary: Searches events with a title and/or location matching the value of the queries parameters.
      security:
          - BearerAuth: []
      parameters:
          - in: query
            name: title
            schema:
              type: string
            required: false
            description: Title to search.
          - in: query
            name: location
            schema:
              type: string
            required: false
            description: Location to search.
      responses:
        "200":
          description: List of events that match with the title and/or location queried.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResponseListEventWithId'
        "400":
          description: Invalid title and/or location.

  /events/{event_id}:
      get:
        tags:
          - events
        summary: Gets an event by ID
        security:
          - BearerAuth: []
        parameters:
          - in: path
            name: event_id
            schema:
              type: integer
            required: true
            description: ID of the event to get  
        responses:
          "200":
            description: Event matching with the specified ID.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResponseEventWithId'
          "400":
            description: Event does not exist or was not found.
      put:
        tags:
          - events
        summary: Edits specified fields of an event if the authenticated user is the owner of the event.
        security:
          - BearerAuth: []
        parameters:
          - in: path
            name: event_id
            schema:
              type: integer
            required: true
            description: ID of the event to get 
        requestBody:
          description: Event information in JSON format. Only the fields to be updated are required.
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RequestEvent'
        responses:
          "200":
            description: Event with the updated information.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ResponseEventWithId'
          "400":
            description: Any of the specified event fields to modify are not valid or the specified event was not
              found or does not exist.
          "403":
            description: Authenticated user trying to modify the specified event is not the owner of it.

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
  schemas:
    RequestUser:
      type: object
      properties:
        name:
          type: string
          description: Name of the user
          example: "Jane"
        last_name:
          type: string
          description: Last name of the user
          example: "Doe"
        email:
          type: string
          description: Email address of the user
          example: "janedoe@openevents.com"
        password:
          type: string
          description: Password of the user
          example: "password"
        image_url:
          type: string
          description: Link URL of the profile image of the user
          example: "https://i.imgur.com/ghy8Xx1.png"
    ResponseUser:
      type: object
      properties:
        name:
          type: string
          description: Name of the user
          example: "Jane"
        last_name:
          type: string
          description: Last name of the user
          example: "Doe"
        email:
          type: string
          description: Email address of the user
          example: "janedoe@openevents.com"
        image_url:
          type: string
          description: Link URL of the profile image of the user
          example: "https://i.imgur.com/ghy8Xx1.png"
    ResponseUserWithId:
      type: object
      properties:
        name:
          type: string
          description: Name of the user
          example: "Jane"
        last_name:
          type: string
          description: Last name of the user
          example: "Doe"
        email:
          type: string
          description: Email address of the user
          example: "janedoe@openevents.com"
        password:
          type: string
          description: Password of the user encrypted
          example: "$2b$10$EcKa.b$10$EcKacncGCugnWVb0b$10$EcKaZ75td7D./4UrSugnWZru"
        image_url:
          type: string
          description: Link URL of the profile image of the user
          example: "https://i.imgur.com/ghy8Xx1.png"
    ResponseListUserWithId:
      type: array
      items:
        type: object
        properties:
            id:
              type: number
              example: 1
            name:
              type: string
              example: "Jane"
            last_name:
              type: string
              example: "Doe"
            email:
              type: string
              example: "janedoe@openevents.com"
            image_url:
              type: string
              example: "https://i.imgur.com/ghy8Xx1.png"
    RequestEvent:
      type: object
      properties:
          title:
            type: string
            example: "Drawing 101: Portraits"
          image_url:
            type: string
            example: "https://i.imgur.com/JprpLyc.jpg"
          format:
            type: number
            example: 1
          link:
            type: string
            example: "https://www.zoom.com/"
          location:
            type: string
            example: "Barcelona"
          description:
            type: string
            example: "Learn the basics of portrait drawing with a professional artist 
              with +10 years of experience"
          start_date:
            type: string
            example: "2022-07-23 10:00"
          end_date:
            type: string
            example: "2022-07-25 10:00"
          max_attendees:
            type: number
            example: 120
          ticket_price:
            type: number
            example: 4.99
          category: 
            type: string
            example: 'Art'
    ResponseEventWithId:
      type: object
      properties:
          id:
            type: number
            example: 12
          title:
            type: string
            example: "Drawing 101: Portraits"
          owner_id:
            type: number
            example: 1
          creation_date:
            type: string
            example: "2022-07-21T23:26:19.000Z"
          image_url:
            type: string
            example: "https://i.imgur.com/JprpLyc.jpg"
          format:
            type: number
            example: 1
          link:
            type: string
            example: "https://www.zoom.com/"
          location:
            type: string
            example: "Barcelona"
          description:
            type: string
            example: "Learn the basics of portrait drawing with a professional artist 
              with +10 years of experience"
          start_date:
            type: string
            example: "2022-07-23T08:00:00.000Z"
          end_date:
            type: string
            example: "2022-07-25T08:00:00.000Z"
          max_attendees:
            type: number
            example: 120
          ticket_price:
            type: number
            example: 4.99
          category: 
            type: string
            example: 'Art'
    ResponseListEventWithId:
      type: array
      items:
        type: object
        properties:
          id:
            type: number
            example: 12
          title:
            type: string
            example: "Drawing 101: Portraits"
          owner_id:
            type: number
            example: 1
          creation_date:
            type: string
            example: "2022-07-21T23:26:19.000Z"
          image_url:
            type: string
            example: "https://i.imgur.com/JprpLyc.jpg"
          format:
            type: number
            example: 1
          link:
            type: string
            example: "https://www.zoom.com/"
          location:
            type: string
            example: "Barcelona"
          description:
            type: string
            example: "Learn the basics of portrait drawing with a professional artist 
              with +10 years of experience"
          start_date:
            type: string
            example: "2022-07-23T08:00:00.000Z"
          end_date:
            type: string
            example: "2022-07-25T08:00:00.000Z"
          max_attendees:
            type: number
            example: 120
          ticket_price:
            type: number
            example: 4.99
          category: 
            type: string
            example: 'Art'
